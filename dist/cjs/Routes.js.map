{"version":3,"file":"Routes.js","names":["_lodash","_interopRequireDefault","require","_Smart2","_resolve","e","__esModule","_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","a","_arrayLikeToArray","t","toString","call","slice","constructor","name","Array","from","test","Symbol","iterator","isArray","length","n","ownKeys","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","_classCallCheck","_defineProperties","key","_createClass","prototype","i","_toPrimitive","_typeof","toPrimitive","String","Number","_callSuper","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","_assertThisInitialized","ReferenceError","Boolean","valueOf","setPrototypeOf","getPrototypeOf","bind","__proto__","_inherits","create","_setPrototypeOf","Routes","_Smart","initialize","routes","undefined","_mount","resolve","scope","node","_getNode","match","paths","split","_","each","path","next","find","draw","_parseNode","extends","parentProviders","parentContext","context","providers","compact","concat","provider","subRoutes","flatten","_mapNode","currentRoute","_getRoute","_this","map","_getScopedPath","route","component","pickBy","isEmpty","resource","identity","Smart","_default","exports"],"sources":["../../src/Routes.js"],"sourcesContent":["import _ from 'lodash';\nimport Smart from './Smart';\nimport resolve from './helpers/resolve';\n\nclass Routes extends Smart {\n\n  initialize(routes = {}) {\n    this._mount = resolve(routes) || {};\n  }\n\n  scope(scope) {\n    if (scope) {\n      const node = this._getNode();\n      let match = null;\n      let routes = node.routes;\n      const paths = scope.split('/');\n      _.each(paths, (path) => {\n        const next = _.find(routes, { path });\n        if (next) {\n          match = next;\n          routes = next.routes;\n        } else {\n          match = null;\n        }\n      });\n      return match;\n    }\n  }\n\n  draw(scope) {\n    const node = scope ? this._getNode(scope) : this._mount;\n    return this._parseNode(node, scope);\n  }\n\n  extends(scope) {\n    const node = this.scope(scope);\n    return node.routes;\n  }\n\n  _parseNode(node, scope, parentProviders = [], parentContext) {\n    const routes = resolve(node.routes, this);\n    const context = { ...parentContext, ...node.context };\n    const providers = _.compact([...parentProviders, node.provider]);\n    const subRoutes = _.flatten(this._mapNode(routes, scope, providers, context));\n    const currentRoute = this._getRoute(node, scope, providers, context, true);\n    return _.compact([\n      ..._.flatten(subRoutes),\n      currentRoute,\n    ]);\n  }\n\n  _mapNode(routes, scope, providers = [], context = {}) {\n    return _.map(routes, (node, key) => {\n      if (node.routes) {\n        return this._parseNode(node, `${scope}/${node.path}`, providers, context);\n      }\n      return this._getRoute(node, scope, providers, context);\n    });\n  }\n\n  _getScopedPath(path, scope) {\n    return scope ? `${scope}/${path}` : path;\n  }\n\n  _getRoute(route, scope, providers = [], context = {}, node = false) {\n    return route.component && _.pickBy({\n      ...route,\n      path: `/${node ? scope : this._getScopedPath(route.path, scope)}`,\n      providers: !_.isEmpty(providers) && providers,\n      component: route.component || false,\n      resource: route.resource || false,\n      context: context,\n    }, _.identity);\n  }\n\n  _getNode(scope = false) {\n    return scope ? this.scope(scope) : this._mount;\n  }\n\n}\n\nexport default Routes;\n"],"mappings":"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","ignoreList":[]}